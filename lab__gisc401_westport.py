# -*- coding: utf-8 -*-
"""LAB_ GISC401_Westport.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14Qf0Qry9ycsCwCycqXuKSofW0k3Z5X13

https://github.com/movingpandas/movingpandas-examples/tree/main

https://github.com/emilcollins14/GISC401Project.git
"""

from google.colab import drive

drive.mount('/content/GDrive')

!pip install gpxpy -q

import os

gpx_files= os.listdir('/content/GDrive/MyDrive/GISC401/GPX_Traces')
gpx_files

gpx_files[0]

import gpxpy
import pandas as pd

# Load gpx.
gpx_path = gpx_files[0]
with open(gpx_path) as f:
    gpx = gpxpy.parse(f)

# Convert to a dataframe one point at a time.
points = []
for segment in gpx.tracks[0].segments:
    for p in segment.points:
        points.append({
            'time': p.time,
            'latitude': p.latitude,
            'longitude': p.longitude,
            'elevation': p.elevation,
        })
track_df = pd.DataFrame.from_records(points)

os.chdir('/content/GDrive/MyDrive/GISC401/GPX_Traces')

track_df

track_df['res'] ='120_sec' # creating a new column 'resolution' with 120 columns

track_df.head(3) # to view the first 3 columns

track_df.dtypes # check the type of data

# Convert the timestamp column to datetime
track_df['timestamp'] = pd.to_datetime(track_df['time'])

track_df

# Format the timestamp column
track_df['timestamp'] = track_df['timestamp'].dt.strftime('%Y-%m-%d %H:%M:%S')

track_df

track_df.to_csv('/content/GDrive/MyDrive/GISC401/Results/120_sec.csv')

!pip install movingpandas -q

import movingpandas as mpd

traj_collection = mpd.TrajectoryCollection(track_df, 'res', t='timestamp', x='longitude', y='latitude')
print(traj_collection)

my_traj = traj_collection.trajectories[0]
print(my_traj)

my_traj.plot(linewidth=5, capstyle='round', figsize=(9,3))

my_traj.hvplot(line_width=7.0, tiles='OSM')

!pip install hvplot -q
!pip install geoviews -q

my_traj.hvplot(line_width=7.0, tiles='OSM')

traj_plot = my_traj.hvplot(title='Trajectory {}'.format(my_traj.id), line_width=7.0, tiles='CartoLight', color='slategray')
traj_plot

detector = mpd.TrajectoryStopDetector(my_traj) #my_traj is trajectpry input that tracks our path

from datetime import datetime, timedelta

stop_time_ranges = detector.get_stop_time_ranges(min_duration=timedelta(seconds=60), max_diameter=100)

for x in stop_time_ranges:
    print(x)

stop_points = detector.get_stop_points(min_duration=timedelta(seconds=60), max_diameter=100)

stop_point_plot = traj_plot * stop_points.hvplot(geo=True, size='duration_s', color='deeppink')

# Commented out IPython magic to ensure Python compatibility.
# %env HV_DOC_HTML=true #embeds the map ie if your plot isnt showing run these lines

import holoviews as hv

hv.extension('bokeh')
stop_point_plot

traj_collection.plot(column='speed', linewidth=5, capstyle='round', legend=True, vmax=20, figsize=(9,5))

traj_collection.add_speed(overwrite=True)

import numpy as np
speed=[]
for traj in traj_collection.trajectories:
  speed.append((traj.df.speed.values))

len(speed)

speed

import matplotlib.pyplot as plt

plt.hist(speed, density=False)
plt.title('Histogram of speeds for trajectoy')
plt.xlabel('Average Speed Between Points')
plt.ylabel('Frequency')
plt.show()

"""https://anitagraser.com/movingpandas/"""

traj_collection.add_distance(overwrite=True, name='dist') #adding distance or time delta
traj_collection.add_timedelta(overwrite=True, name='td')

traj_collection.trajectories

dist=[]
for traj in traj_collection.trajectories:
  dist.append((traj.df.dist.values))

dist

import matplotlib.pyplot as plt

plt.hist(dist, density=False)
plt.title('Histogram of distances between points')
plt.xlabel('Dist Between Points')
plt.ylabel('Frequency')
plt.show()

td=[]

from datetime import datetime

for traj in traj_collection.trajectories:
  td.append((traj.df.td.dt.seconds.values))

td

import pandas as pd
pd.unique(td[0])

# Using a dictionary to count the frequency of each value
frequency_dict = {}
for value in td[0]:
    if value in frequency_dict:
        frequency_dict[value] += 1
    else:
        frequency_dict[value] = 1

# Output the frequencies
for key, value in frequency_dict.items():
    print(f"The frequency of {key} is: {value}")

import matplotlib.pyplot as plt

plt.hist(td, density=False)
plt.title('Histogram of speeds for trajectory')
plt.xlabel('Time Points')
plt.ylabel('Frequency')
plt.show()